from idaes.core.surrogate.pysmo_surrogate import PysmoPolyTrainer, PysmoSurrogate
from idaes.core.surrogate.sampling.data_utils import split_training_validation
from idaes.core.surrogate.plotting.sm_plotter import (
    surrogate_scatter2D,
    surrogate_scatter3D,
    surrogate_parity,
    surrogate_residual,
)

import pandas as pd

# https://idaes-pse.readthedocs.io/en/stable/explanations/modeling_extensions/surrogate/api/pysmo/pysmo_polyregression.html
# https://idaes-pse.readthedocs.io/en/stable/explanations/modeling_extensions/surrogate/api/pysmo/index.html#pysmo-python-based-surrogate-modeling-objects
# https://idaes-pse.readthedocs.io/en/stable/explanations/modeling_extensions/surrogate/plotting/index.html#visualizing-surrogate-model-results


def main(save=False):
    # data is generated by running generate_diffusion_data.py
    poly_train_d11_scaled = train_surrogate_model(
        datafile=f"surrogate_data/D_11_scaled.csv",
        parametername="D_11_scaled",
        max_order=6,
    )
    # poly_train_d12_scaled = train_surrogate_model(
    #     datafile=f"surrogate_data/D_12_scaled.csv",
    #     parametername="D_12_scaled",
    # )
    # poly_train_d21_scaled = train_surrogate_model(
    #     datafile=f"surrogate_data/D_21_scaled.csv",
    #     parametername="D_21_scaled",
    # )
    # poly_train_d22_scaled = train_surrogate_model(
    #     datafile=f"surrogate_data/D_22_scaled.csv",
    #     parametername="D_22_scaled",
    # )
    # poly_train_alpha1 = train_surrogate_model(
    #     datafile=f"surrogate_data/alpha_1.csv",
    #     parametername="alpha_1",
    # )
    # poly_train_alpha2 = train_surrogate_model(
    #     datafile=f"surrogate_data/alpha_2.csv",
    #     parametername="alpha_2",
    # )
    if save:
        poly_train_d11_scaled.save_to_file(
            f"surrogate_models/pysmo_surrogate_d11_scaled.json",
            overwrite=True,
        )
        # poly_train_d12_scaled.save_to_file(
        #     f"surrogate_models/pysmo_surrogate_d12_scaled.json",
        #     overwrite=True,
        # )
        # poly_train_d21_scaled.save_to_file(
        #     f"surrogate_models/pysmo_surrogate_d21_scaled.json",
        #     overwrite=True,
        # )
        # poly_train_d22_scaled.save_to_file(
        #     f"surrogate_models/pysmo_surrogate_d22_scaled.json",
        #     overwrite=True,
        # )
        # poly_train_alpha1.save_to_file(
        #     f"surrogate_models/pysmo_surrogate_alpha1.json",
        #     overwrite=True,
        # )
        # poly_train_alpha2.save_to_file(
        #     f"surrogate_models/pysmo_surrogate_alpha2.json",
        #     overwrite=True,
        # )


def train_surrogate_model(datafile, parametername, max_order=4):
    # load data from full expressions
    data = pd.read_csv(datafile)

    # define input and output labels
    input_labels = ["conc_1", "conc_2", "chi"]
    output_labels = [parametername]
    xmin = [50, 50, -140]
    xmax = [110, 140, 0]
    input_bounds = {
        input_labels[i]: (xmin[i], xmax[i]) for i in range(len(input_labels))
    }

    n_data = data[input_labels[0]].size
    data_training, data_validation = split_training_validation(data, 0.8, seed=n_data)

    # create PySMO regression trainer object
    pr_trainer = PysmoPolyTrainer(
        input_labels=input_labels,
        output_labels=output_labels,
        training_dataframe=data,
    )

    # set PySMO options
    pr_trainer.config.maximum_polynomial_order = max_order

    # train surrogate model
    poly_train = pr_trainer.train_surrogate()

    surrogate = PysmoSurrogate(poly_train, input_labels, output_labels, input_bounds)

    # visualize
    surrogate_scatter2D(surrogate, data_validation, show=True)
    surrogate_scatter3D(surrogate, data_validation, show=True)
    surrogate_parity(surrogate, data_validation, show=True)
    surrogate_residual(surrogate, data_validation, show=True)

    return surrogate


if __name__ == "__main__":
    main()
